{"version":3,"sources":["styles/less/index.less","components/about.jsx","components/controls.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","Controls","numRows","numCols","running","setRunning","setGrid","runningRef","runSimulation","population","onClick","current","style","cursor","undefined","rows","i","push","Array","from","Math","random","generation","operations","generateEmptyGrid","App","useState","grid","speed","modifiers","setModifiers","cellSize","useRef","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","updateModifiers","e","target","name","Number","value","display","border","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","defaultValue","onChange","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6696f6a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.884e378d.less\";","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"rules\">\r\n      <h2>Rules</h2>\r\n      <ul className=\"rules-list\">\r\n        <li>\r\n          Any living cell with fewer than two living neighbors will die, as if\r\n          by underpopulation.\r\n        </li>\r\n        <li>\r\n          Any living cell with either two or three living neighbors will survive\r\n          to the next generation.\r\n        </li>\r\n        <li>\r\n          Any living cell with three or more neighbors will die, as if by\r\n          overpopulation.\r\n        </li>\r\n        <li>\r\n          Any dead cell with exactly three living neighbors will become a living\r\n          cell, as if by reproduction.\r\n        </li>\r\n      </ul>\r\n      <div className=\"about-section\">\r\n        <h2>About</h2>\r\n        <p>\r\n          Conway's \"Game of Life\" is a cellular automaton created by the British\r\n          Mathematician John Conway. The game is comprised of a potentially\r\n          infinite number of \"cells\", each of which have two states, alive or\r\n          dead. The state of each of these cells is determined by the number of neighbors, as outlined in the rules above. By applying these simple rules, a number of patterns can be generated, as cells begin interacting with one another This may result in the death of all cells in a matter of generations, or an infinte loop of new patterns. \r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst Controls = ({\r\n  numRows,\r\n  numCols,\r\n  running,\r\n  setRunning,\r\n  setGrid,\r\n  runningRef,\r\n  runSimulation,\r\n  population,\r\n}) => {\r\n  return (\r\n    <div className=\"btn-container\">\r\n      <button\r\n        onClick={() => {\r\n          setRunning(!running);\r\n          if (!running) {\r\n            runningRef.current = true;\r\n            runSimulation();\r\n          }\r\n        }}\r\n      >\r\n        {running ? \"Stop\" : \"Start\"}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          if (!running) {\r\n            runSimulation();\r\n          }\r\n        }}\r\n        style={running ? {cursor: 'not-allowed'} : undefined}\r\n      >\r\n        Next Generation\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          if (!running) {\r\n            const rows = [];\r\n            for (let i = 0; i < numRows; i++) {\r\n              rows.push(\r\n                Array.from(Array(numCols), () => (Math.random() > (population / 100) ? 0 : 1))\r\n              );\r\n            }\r\n            setGrid(rows);\r\n          }\r\n        }}\r\n        style={running ? {cursor: 'not-allowed'} : undefined}\r\n      >\r\n        Random\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\n\nimport About from \"./components/about\";\nimport Controls from \"./components/controls\";\n\nimport \"./styles/less/index.less\";\n\nconst numRows = 50;\nconst numCols = 50;\nlet generation = 0;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [modifiers, setModifiers] = useState({\n    population: 50,\n    speed: 500,\n  })\n\n  const [cellSize, setCellSize] = useState(10);\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef();\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    generation += 1;\n\n    if (runningRef.current) {\n\n      setTimeout(runSimulation, modifiers.speed);\n    }\n  }, [modifiers.speed]);\n\n  const updateModifiers = e => {\n    setModifiers({...modifiers, [e.target.name]: Number(e.target.value)})\n  }\n\n\n\n  return (\n    <>\n    <h1>Conway's Game of Life</h1>\n      <div className=\"main-section\">\n        <div className=\"grid-container\">\n          <div className='grid-top'>\n          <h2 className=\"generation-counter\">Generation: {generation}</h2>\n          <button\n            onClick={() => {\n              if (!running) {\n                setGrid(generateEmptyGrid());\n                generation = 0;\n              }\n            }}\n            style={running ? {cursor: 'not-allowed'} : undefined}\n          >\n            Reset\n          </button>\n          </div>\n          <div\n            className=\"grid\"\n            style={{\n              display: \"grid\",\n              border: \"1px solid black\",\n              gridTemplateColumns: `repeat(${numCols}, ${cellSize}px)`,\n            }}\n          >\n            {grid.map((rows, i) =>\n              rows.map((col, k) => (\n                <div\n                  className={grid[i][k] ? \"alive\" : \"dead\"}\n                  key={`${i}-${k}`}\n                  onClick={\n                    !running\n                      ? () => {\n                          const newGrid = produce(grid, (gridCopy) => {\n                            gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                          });\n                          setGrid(newGrid);\n                        }\n                      : undefined\n                  }\n                  style={{\n                    width: cellSize,\n                    height: cellSize,\n                    backgroundColor: grid[i][k] ? \"white\" : undefined,\n\n                  }}\n                />\n              ))\n            )}\n          </div>\n          <Controls\n            numRows={numRows}\n            numCols={numCols}\n            running={running}\n            setRunning={setRunning}\n            generateEmptyGrid={generateEmptyGrid}\n            generation={generation}\n            setGrid={setGrid}\n            runningRef={runningRef}\n            runSimulation={runSimulation}\n            population={modifiers.population}\n          />\n          <div className='modifiers'>\n            <div className='modifier'>\n          <span>Population Density</span>\n          <select defaultValue={50} name='population' onChange={updateModifiers}>\n          <option value={10}>10%</option>\n          <option value={20}>20%</option>\n          <option value={30}>30%</option>\n          <option value={40}>40%</option>\n          <option value={50}>50% (default)</option>\n          <option value={60}>60%</option>\n          <option value={70}>70%</option>\n          <option value={80}>80%</option>\n          <option value={90}>90%</option>\n          <option value={100}>100%</option>\n          </select>\n          </div>\n          <div className='modifier'>\n          <span>Simulation Speed in ms</span>\n          <input type='number' name='speed' placeholder={modifiers.speed} onChange={updateModifiers}></input>\n          </div>\n        </div>\n        </div>\n        <About />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}